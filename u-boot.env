# U-Boot environment variables for booting linux

# miscellaneous variables not set by 'env default -a'
# it's not clear if any of these are used/necessary
ethact=neta@30000
stderr=serial@12000
stdin=serial@12000
stdout=serial@12000

# hex memory addresses where u-boot will load files
# 0x6000000 =  96MiB is the u-boot build default for $loadaddr. Don't use this area +1M.
# 0x6f00000 = 111MiB is the u-boot build default for $fdt_addr_r
# 0x7000000 = 112MiB is the u-boot build default for $kernel_addr_r
# 0xb000000 = 176MiB is used for the initramfs. The u-boot build default of 0x8000000 is overriden to create lots of space for the kernel image.
#fdt_addr_r=0x6f00000
#kernel_addr_r=0x7000000
ramdisk_addr_r=0xb000000

# paths to the kernel, device tree, and initramfs
image_name=/boot/%PKGBASE%/Image
fdt_name=/boot/%PKGBASE%/fdt.dtb
ramfs_name=/boot/%PKGBASE%/ramfs.img

# scsi 0 is the internal M2 SATA drive
# u-boot was built with ext4 support so we can load directly from /boot
get_kernel=ext4load scsi 0 $kernel_addr_r $image_name
get_fdt=ext4load scsi 0 $fdt_addr_r $fdt_name
get_ramfs=if test "${ramfs_name}" != "-"; then ext4load scsi 0 $ramdisk_addr_r $ramfs_name; else setenv ramdisk_addr_r -;fi

# combine all loads into one line
get_images=scsi scan; run get_kernel; run get_fdt; run get_ramfs

# set linux command line parameters
# root points to the GUID of the partiion containing a linux root filesystem
root=UUID=6f4b7715-4747-439a-bbff-9bba8da6b8b6 rw
set_bootargs=setenv bootargs $console root=$root

# 'booti' uses initramfs; 'bootefi' tries to boot the kernel directly (efistub)
bootcmd=run get_images; run set_bootargs; booti $kernel_addr_r $ramdisk_addr_r $fdt_addr_r

# trying to boot Image directly (efistub) is broken in linux >= 6.0. linux devs suggest globalscale's custom u-boot is the problem
#bootcmd=run get_images; run set_bootargs; bootefi $kernel_addr_r $fdt_addr_r
